<?xml version="1.0" encoding="UTF-8"?>
<project name="L2jFrozen_DataPack" default="dist-local" basedir=".">
	<description>
        This script will build the L2J-Frozen DataPack. Thanks for Using our Pack.
        
        This program is opensource   
        
    </description>

	<property file="build.properties" />

	<target name="prepare-test" description="Prepare the test folder property">

		<property name="build" location="${test_destination_folder}" />

	</target>

	<target name="prepare-compiledRev" description="Prepare the compiledRev folder property">

		<property name="build" location="${compiled_rev_destination_folder}" />

	</target>

	<target name="prepare-local" description="Prepare the local folder property">

		<property name="build" location="build" />

	</target>

	<target name="prepare-final" description="Prepare the final folders properties">

		<property name="build.dist" location="${build}/dist" />
		<property name="build.dist.game" location="${build.dist}/gameserver" />
		<property name="build.dist.login" location="${build.dist}/loginserver" />
		<property name="build.dist.sql" location="${build.dist}/sql" />
		<property name="build.dist.tools" location="${build.dist}/tools" />
		<property name="properties-file" location="${build.dist.game}/config/version/l2jfrozen-datapack.properties" />

	</target>

	<target name="init" description="Create the output directories. Do nothing if dirs were already created">
		<mkdir dir="${build}" />
		<mkdir dir="${build.dist}" />
		<mkdir dir="${build.dist.game}" />
		<mkdir dir="${build.dist.login}" />
	</target>


	<target name="export" depends="version" description="Syncronizes build space contents with project.">
		<copy todir="${build.dist.game}/data">
			<fileset dir="${basedir}/data">
				<exclude name=".project" />
				<exclude name="log/**" />
				<exclude name="cachedir/**" />
				<exclude name="clans/**" />
				<exclude name="crests/**" />
				<exclude name="**.svn**" />
				<exclude name="**/*.class" />
				<exclude name="**/*.jar" />
				<exclude name="geodata/**" />
				<exclude name="pathnode/**" />
				<include name="**/*.*" />
			</fileset>
		</copy>
		<copy todir="${build.dist.sql}">
			<fileset dir="${basedir}/sql">
				<include name="*.*" />
				<include name="customs/*.*" />
				<include name="custom_zones/*.*" />
				<include name="updates/*.*" />
			</fileset>
		</copy>
		<copy todir="${build.dist.tools}">
			<fileset dir="${basedir}/tools">
				<include name="*.*" />
				<exclude name="database_installer.rc" />
				<exclude name="*.txt" />
				<exclude name="*.log" />
				<exclude name="*backup.sql" />
				<include name="custom/*.*" />
			</fileset>
		</copy>
		<copy todir="${build.dist.login}">
			<fileset dir="${build.dist.game}/data">
				<include name="servername.xml" />
			</fileset>
		</copy>
	</target>

	<target name="dist-local" depends="prepare-local,prepare-final,export" description="Create distribution files and Zip one into 'build' folder">
		<zip destfile="${build}/L2JFrozen_DataPack.zip" basedir="${build.dist}" update="true" />
	</target>

	<target name="dist-test" depends="prepare-test,prepare-final,export" description="Create distribution files into 'local_test_folder' folder: change it into build.properties">
	</target>

	<target name="dist-compiledRev" depends="prepare-compiledRev,prepare-final,export" description="Create distribution files into 'compiledRev_folder' folder: change it into build.properties">
	</target>


	<target name="version" depends="init" description="Create Version file">

		<tstamp>
			<format property="build.tstamp" pattern="dd-MM-yyyy hh:mm:ss aa" />
		</tstamp>

		<exec dir="." executable="./subversion/svnversion" outputproperty="l2jfrozen.revision" failifexecutionfails="false">
			<arg line="-n ." />
		</exec>

		<concat destfile="${properties-file}">
			      revision=${l2jfrozen.revision}
			      builddate=${build.tstamp}
		      	  repository=http://subversion.assembla.com/svn/L2jFrozenInterlude/trunk/datapack
			  </concat>

		<echo>L2jFrozen Datapack Revision: ${l2jfrozen.revision}</echo>
	</target>


</project>
